name: squash-merge-into-dev

on:
  workflow_dispatch:
    inputs:
      pr_number:
        description: "Pull Request Number (e.g., 123)"
        required: true
        type: string

permissions:
  contents: write
  pull-requests: write
  actions: write
  checks: read

jobs:
  squash-merge:
    name: Squash merge PR into dev
    runs-on: ubuntu-latest
    
    steps:
      - name: Install GitHub CLI
        run: |
          type -p gh >/dev/null || {
            type -p curl >/dev/null || sudo apt update && sudo apt install -y curl
            curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg \
              | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
            sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg
            echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" \
              | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
            sudo apt update
            sudo apt install -y gh
          }
          gh version
        env:
          GH_TOKEN: ${{ secrets.PAT }}

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.PAT }}

      - name: Configure Git
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      - name: Get PR branch name and base branch
        id: pr_info
        run: |
          if ! [[ "${{ github.event.inputs.pr_number }}" =~ ^[0-9]+$ ]]; then
            echo "Invalid PR number: ${{ github.event.inputs.pr_number }}"
            exit 1
          fi

          PR_INFO=$(gh pr view ${{ github.event.inputs.pr_number }} \
            --json headRefName,baseRefName \
            -q '{ "branch_name": .headRefName, "base_branch": .baseRefName }') || {
              echo "❌ Failed to fetch PR details"
              exit 1
            }

          echo "$PR_INFO"
          echo "branch_name=$(echo "$PR_INFO" | jq -r .branch_name)" >> $GITHUB_ENV
          echo "base_branch=$(echo "$PR_INFO" | jq -r .base_branch)" >> $GITHUB_ENV

          if [ "$BASE_BRANCH" != "dev" ]; then
            echo "❌ PR must target 'dev', not '$BASE_BRANCH'"
            exit 1
          fi
        env:
          GH_TOKEN: ${{ secrets.PAT }}

      - name: Validate branch name
        run: |
          if [[ ! "${{ env.branch_name }}" =~ ^[a-zA-Z0-9._/-]+$ ]]; then
            echo "❌ Invalid feature branch name"
            exit 1
          fi
          if [[ "${{ env.branch_name }}" == "main" || "${{ env.branch_name }}" == "dev" ]]; then
            echo "❌ Branch cannot be main or dev"
            exit 1
          fi

      - name: Check duplicate squash commit on dev
        id: check_commit
        run: |
          git fetch origin dev
          LAST_COMMIT_MSG=$(git log -1 --pretty=%s origin/dev)

          echo "Latest commit on dev: $LAST_COMMIT_MSG"

          if [[ "${LAST_COMMIT_MSG,,}" == "from ${{ env.branch_name }},," ]]; then
            echo "duplicate=true" >> $GITHUB_OUTPUT
          else
            echo "duplicate=false" >> $GITHUB_OUTPUT
          fi

      - name: Trigger revert workflow if duplicate detected
        if: steps.check_commit.outputs.duplicate == 'true'
        run: |
          echo "Duplicate commit detected — triggering revert workflow..."
          gh workflow run "Revert-from-dev" -f branch_name="${{ env.branch_name }}"
        env:
          GH_TOKEN: ${{ secrets.PAT }}

      - name: Check PR mergeability and status checks
        id: check_mergeability
        run: |
          MERGEABLE=$(gh pr view ${{ github.event.inputs.pr_number }} --json mergeable -q ".mergeable")

          if [ "$MERGEABLE" == "CONFLICTING" ]; then
            echo "mergeable=false" >> $GITHUB_OUTPUT
            exit 0
          fi

          FAILING=$(gh pr view ${{ github.event.inputs.pr_number }} \
            --json statusCheckRollup -q '.statusCheckRollup[] | select(.status == "FAILURE") | .name' || true)
          
          if [ -n "$FAILING" ]; then
            echo "mergeable=false" >> $GITHUB_OUTPUT
            exit 0
          fi

          echo "mergeable=true" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ secrets.PAT }}

      - name: Squash merge PR into dev
        id: merge
        if: steps.check_mergeability.outputs.mergeable == 'true'
        run: |
          echo "Squash merging PR #${{ github.event.inputs.pr_number }}..."

          gh pr merge ${{ github.event.inputs.pr_number }} \
            --squash \
            --subject "from ${{ env.branch_name }}" \
            --body "Squash merge from ${{ env.branch_name }}"

          echo "conflict=false" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ secrets.PAT }}

      - name: Fail if merge failed
        if: steps.merge.outputs.conflict == 'true'
        run: |
          echo "❌ Merge failed — see logs above"
          exit 1
