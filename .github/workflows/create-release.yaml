name: Release Pipeline

on:
  workflow_dispatch:
    inputs:
      mode:
        description: "Choose: patch (auto bump) or release (manual version)"
        required: true
        type: choice
        options:
          - patch
          - release
      version:
        description: "Version (required if mode=release)"
        required: false
        default: ""

jobs:
  release:
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.version.outputs.new_version }}
      release_branch: ${{ steps.create_branch.outputs.release_branch }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT }}
          fetch-depth: 0

      - name: Set Git identity
        run: |
          git config user.name "GitHub Actions Bot"
          git config user.email "actions@github.com"

      - name: Fetch all branches and tags
        run: git fetch --all --tags

      - name: Determine version
        id: version
        run: |
          MODE="${{ github.event.inputs.mode }}"
          if [ "$MODE" = "patch" ]; then
            LAST_TAG=$(git describe --tags `git rev-list --tags --max-count=1` || echo "0.0.0")
            echo "Last tag: $LAST_TAG"
            IFS='.' read -r major minor patch <<< "${LAST_TAG#v}"
            patch=$((patch+1))
            NEW_VERSION="$major.$minor.$patch"
          else
            NEW_VERSION="${{ github.event.inputs.version }}"
            if [ -z "$NEW_VERSION" ]; then
              echo "‚ùå Version is required when mode=release"
              exit 1
            fi
          fi

          # Check if tag exists
          if git rev-parse "v$NEW_VERSION" >/dev/null 2>&1; then
            echo "‚ùå Tag v$NEW_VERSION already exists!"
            exit 1
          fi

          echo "new_version=$NEW_VERSION" >> $GITHUB_ENV
          echo "::set-output name=new_version::$NEW_VERSION"
          echo "‚úÖ Version to create: v$NEW_VERSION"

      - name: Create release branch from dev
        id: create_branch
        run: |
          RELEASE_BRANCH="release/v${{ env.new_version }}"
          git checkout dev
          git pull origin dev
          git checkout -b $RELEASE_BRANCH
          git push origin $RELEASE_BRANCH
          echo "::set-output name=release_branch::$RELEASE_BRANCH"
          echo "‚úÖ Created release branch: $RELEASE_BRANCH"

      - name: Merge release branch into test environment
        run: |
          TEST_BRANCH="test"
          git checkout $TEST_BRANCH
          git pull origin $TEST_BRANCH
          git merge --no-ff ${{ steps.create_branch.outputs.release_branch }} -m "Merge ${{ steps.create_branch.outputs.release_branch }} into $TEST_BRANCH for testing"
          git push origin $TEST_BRANCH
          echo "‚úÖ Merged release branch into $TEST_BRANCH for testing"

      - name: Wait for manual testing
        run: |
          echo "‚ö†Ô∏è Pause here for manual testing in test environment before merging to main."
          echo "You can continue by triggering the next workflow/job manually."

  finalize_release:
    needs: release
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT }}
          fetch-depth: 0

      - name: Set Git identity
        run: |
          git config user.name "GitHub Actions Bot"
          git config user.email "actions@github.com"

      - name: Merge release branch into main
        run: |
          git checkout main
          git pull origin main
          git merge --no-ff ${{ needs.release.outputs.release_branch }} -m "Merge release ${{ needs.release.outputs.release_branch }} into main"
          git push origin main
          echo "‚úÖ Merged release branch into main"

      - name: Create tag
        run: |
          git tag "v${{ needs.release.outputs.new_version }}"
          git push origin "v${{ needs.release.outputs.new_version }}"
          echo "‚úÖ Created tag v${{ needs.release.outputs.new_version }}"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ needs.release.outputs.new_version }}
          name: Release v${{ needs.release.outputs.new_version }}
          body: "üöÄ Release v${{ needs.release.outputs.new_version }} from main"
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }}
