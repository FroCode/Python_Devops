name: manual-revert-workflow

on:
  workflow_dispatch:
    inputs:
      branch_name:
        description: "Branch name whose pull request merge commits to revert in dev (e.g., f15)"
        required: true

jobs:
  revert-merge-commits:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch all history for proper commit lookup
        token: ${{ secrets.PAT }}  # Use PAT for push permissions

    - name: Normalize branch name
      id: normalize
      run: |
        BRANCH_NAME=$(echo "${{ github.event.inputs.branch_name }}" | sed 's#^remotes/origin/##')
        if [[ ! "$BRANCH_NAME" =~ ^[a-zA-Z0-9._-]+$ ]]; then
          echo "Error: Invalid branch name '$BRANCH_NAME'"
          exit 1
        fi
        echo "normalized_branch=$BRANCH_NAME" >> $GITHUB_OUTPUT

    - name: Validate branch exists
      run: |
        if ! git show-ref --quiet refs/remotes/origin/${{ steps.normalize.outputs.normalized_branch }}; then
          echo "Error: Remote branch 'origin/${{ steps.normalize.outputs.normalized_branch }}' does not exist. Available branches:"
          git branch -a
          exit 1
        fi

    - name: Switch to dev branch
      run: git checkout dev

    - name: Debug merge commits
      run: |
        echo "Listing merge commits in dev for branch '${{ steps.normalize.outputs.normalized_branch }}':"
        git log --merges --first-parent dev --grep="Merge pull request .* from .*${{ steps.normalize.outputs.normalized_branch }}" --oneline --graph
        echo "Current commit on dev:"
        git log -1 --oneline

    - name: Find merge commits for PR
      id: find_merge_commits
      run: |
        MERGE_COMMITS=$(git log --merges --first-parent dev --grep="Merge pull request .* from .*${{ steps.normalize.outputs.normalized_branch }}" --pretty=%H)
        if [ -z "$MERGE_COMMITS" ]; then
          echo "Error: No merge commits found for a pull request from branch '${{ steps.normalize.outputs.normalized_branch }}' in dev"
          exit 1
        fi
        echo "Found merge commits:"
        echo "$MERGE_COMMITS" | while read -r COMMIT; do
          echo "- $COMMIT"
          git show --summary $COMMIT
        done
        echo "merge_commits<<EOF" >> $GITHUB_OUTPUT
        echo "$MERGE_COMMITS" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Configure Git user
      run: |
        git config --global user.name "GitHub Actions"
        git config --global user.email "actions@github.com"

    - name: Attempt revert merge commits
      id: revert
      run: |
        echo "Attempting to revert merge commits for branch '${{ steps.normalize.outputs.normalized_branch }}'"
        REVERTED_COMMITS=""
        ANY_CHANGES=false
        for COMMIT in ${{ steps.find_merge_commits.outputs.merge_commits }}; do
          # Check if the commit was already reverted
          if git log --grep="Revert.*$COMMIT" dev --oneline | grep -q . || \
             git log --grep="Revert.*${{ steps.normalize.outputs.normalized_branch }}" dev --oneline | grep -q .; then
            echo "Skipping commit $COMMIT: Already reverted."
            git log --grep="Revert.*$COMMIT" dev --oneline || git log --grep="Revert.*${{ steps.normalize.outputs.normalized_branch }}" dev --oneline
            continue
          fi
          # Verify it's a merge commit
          PARENT_COUNT=$(git rev-list --parents -n 1 $COMMIT | wc -w)
          if [ "$PARENT_COUNT" -lt 2 ]; then
            echo "Error: Commit $COMMIT is not a merge commit (has $PARENT_COUNT parents)."
            exit 1
          fi
          echo "Reverting merge commit $COMMIT"
          set +e  # Disable exit-on-error to capture revert output
          REVERT_OUTPUT=$(git revert -m 1 --no-commit $COMMIT 2>&1)
          REVERT_STATUS=$?
          set -e  # Re-enable exit-on-error
          if [ $REVERT_STATUS -ne 0 ]; then
            echo "Error: Failed to revert commit $COMMIT: $REVERT_OUTPUT"
            git revert --abort || true
            continue
          fi
          if git status --porcelain | grep -q "^[ADRU]"; then
            git commit -m "Revert merge commit $COMMIT from pull request of ${{ steps.normalize.outputs.normalized_branch }}"
            REVERTED_COMMITS="$REVERTED_COMMITS $COMMIT"
            ANY_CHANGES=true
          else
            echo "Warning: Revert of commit $COMMIT produced no changes (may already be reverted). Revert output: $REVERT_OUTPUT"
            git revert --abort || true
          fi
        done
        if [ "$ANY_CHANGES" = "true" ]; then
          echo "has_changes=true" >> $GITHUB_OUTPUT
          echo "reverted_commits=$REVERTED_COMMITS" >> $GITHUB_OUTPUT
        else
          echo "Error: No changes produced from reverting any merge commits (all may already be reverted)."
          exit 1
        fi

    - name: Push to dev
      if: steps.revert.outputs.has_changes == 'true'
      run: |
        git remote set-url origin https://${{ secrets.PAT }}@github.com/${{ github.repository }}.git
        git push origin dev
        echo "Successfully pushed revert commits for: ${{ steps.revert.outputs.reverted_commits }}"

    - name: Notify success
      if: steps.revert.outputs.has_changes == 'true'
      run: |
        echo "Successfully reverted the following merge commits from branch '${{ steps.normalize.outputs.normalized_branch }}' in dev:"
        for COMMIT in ${{ steps.revert.outputs.reverted_commits }}; do
          echo "- $COMMIT"
        done