name: Revert last merge or commits from branch into dev

on:
  workflow_dispatch:
    inputs:
      branch_to_revert:
        description: 'Branch name (without origin/) that was merged into dev'
        required: true

jobs:
  revert:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false  # VERY IMPORTANT to disable default token
      - name: Setup authenticated remote
        run: |
          git remote set-url origin https://x-access-token:${{ secrets.PAT }}@github.com/${{ github.repository }}.git

      - name: Ensure dev branch exists locally
        run: |
          git fetch origin dev:dev

      - name: Normalize input branch
        id: normalize
        run: |
          REF="${{ github.event.inputs.branch_to_revert }}"
          REF="${REF#refs/heads/}"
          REF="${REF#remotes/origin/}"
          echo "normalized_branch=$REF" >> $GITHUB_OUTPUT
          echo "Target branch/ref: $REF"

      - name: Resolve ref to SHA
        id: resolve_ref
        run: |
          REF="${{ steps.normalize.outputs.normalized_branch }}"
          if ! SHA=$(git rev-parse --verify --quiet "$REF"); then
            if ! SHA=$(git rev-parse --verify --quiet "origin/$REF"); then
              echo "Error: Ref '$REF' not found."
              git branch -a
              exit 1
            fi
          fi
          echo "ref_sha=$SHA" >> $GITHUB_OUTPUT
          echo "Resolved ref to $SHA"

      - name: Revert last merge or commits from branch
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }}   # Export PAT for git commands
        run: |
          TARGET_SHA=${{ steps.resolve_ref.outputs.ref_sha }}

          MERGE_BASE=$(git merge-base dev $TARGET_SHA)
          echo "Merge base between dev and target: $MERGE_BASE"

          MERGE_COMMIT=""

          for COMMIT in $(git log --merges --first-parent dev --pretty=%H); do
            SECOND_PARENT=$(git rev-list --parents -n 1 $COMMIT | awk '{print $3}')
            if [ -n "$SECOND_PARENT" ] && git merge-base --is-ancestor $SECOND_PARENT $TARGET_SHA; then
              if ! git merge-base --is-ancestor $SECOND_PARENT $MERGE_BASE; then
                MERGE_COMMIT=$COMMIT
                break
              fi
            fi
          done

          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git checkout dev

          if [ -z "$MERGE_COMMIT" ]; then
            echo "No explicit merge commit found. Assuming squash or fast-forward."
            echo "Collecting commits from branch since merge base..."

            COMMITS=$(git log dev ^$MERGE_BASE --pretty=%H --ancestry-path $MERGE_BASE..dev | tac)

            if [ -z "$COMMITS" ]; then
              echo "Error: No commits to revert"
              exit 1
            fi

            for C in $COMMITS; do
              PARENTS=$(git rev-list --parents -n 1 $C)
              COUNT=$(echo "$PARENTS" | wc -w)
              if [ "$COUNT" -gt 2 ]; then
                echo "Reverting merge commit $C"
                git revert -m 1 --no-edit "$C"
              else
                echo "Reverting commit $C"
                git revert --no-edit "$C"
              fi
            done
          else
            echo "Found merge commit: $MERGE_COMMIT"
            git revert -m 1 --no-edit "$MERGE_COMMIT"
          fi

          git remote set-url origin https://x-access-token:${{ secrets.PAT }}@github.com/${{ github.repository }}.git
          git push origin dev
