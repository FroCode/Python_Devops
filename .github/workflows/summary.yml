name: Revert last merge from branch into dev

on:
  workflow_dispatch:
    inputs:
      branch_to_revert:
        description: 'Branch name or ref to revert (merged into dev)'
        required: true

jobs:
  revert:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Ensure dev branch is fetched
        run: |
          git fetch origin dev:dev

      - name: Normalize input branch
        id: normalize
        run: |
          REF="${{ github.event.inputs.branch_to_revert }}"
          REF="${REF#refs/heads/}"
          REF="${REF#remotes/origin/}"
          echo "normalized_branch=$REF" >> $GITHUB_OUTPUT
          echo "Target branch/ref: $REF"

      - name: Resolve branch or ref to commit SHA
        id: resolve_ref
        run: |
          REF="${{ steps.normalize.outputs.normalized_branch }}"
          if ! SHA=$(git rev-parse --verify --quiet "$REF"); then
            if ! SHA=$(git rev-parse --verify --quiet "origin/$REF"); then
              echo "Error: Ref '$REF' not found (neither local nor origin/$REF)."
              git branch -a
              exit 1
            fi
          fi
          echo "ref_sha=$SHA" >> $GITHUB_OUTPUT
          echo "Resolved $REF to $SHA"

      - name: Find last merge commit from branch into dev
        id: find_merge
        run: |
          TARGET_SHA=${{ steps.resolve_ref.outputs.ref_sha }}
          MERGE_BASE=$(git merge-base dev $TARGET_SHA)
          MERGE_COMMIT=""
          echo "Merge base between dev and target: $MERGE_BASE"

          for COMMIT in $(git log --merges --first-parent dev --pretty=%H); do
            SECOND_PARENT=$(git rev-list --parents -n 1 $COMMIT | awk '{print $3}')
            if [ -n "$SECOND_PARENT" ] && git merge-base --is-ancestor $SECOND_PARENT $TARGET_SHA; then
              if ! git merge-base --is-ancestor $SECOND_PARENT $MERGE_BASE; then
                MERGE_COMMIT=$COMMIT
                break
              fi
            fi
          done

          if [ -z "$MERGE_COMMIT" ]; then
            echo "Error: No merge commit from that branch found in dev."
            exit 1
          fi

          echo "Found merge commit: $MERGE_COMMIT"
          echo "merge_commit=$MERGE_COMMIT" >> $GITHUB_OUTPUT

      - name: Revert the merge commit on dev
        run: |
          COMMIT=${{ steps.find_merge.outputs.merge_commit }}
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"

          git checkout dev
          git revert -m 1 --no-edit "$COMMIT"
          git push origin dev
