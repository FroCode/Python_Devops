name: Revert Branch from Dev

on:
  workflow_dispatch:
    inputs:
      target_branch:
        description: 'Branch or ref to revert from dev (local, remote, tag, SHA, etc.)'
        required: true

jobs:
  revert:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Fetch dev branch
        run: |
          git fetch origin dev:dev
      - name: Normalize input
        id: normalize
        run: |
          # Normalize input (strip refs/heads/ if user typed full ref)
          REF="${{ github.event.inputs.target_branch }}"
          REF="${REF#refs/heads/}"
          REF="${REF#remotes/origin/}"
          echo "normalized_branch=$REF" >> $GITHUB_OUTPUT
          echo "Target branch/ref: $REF"

      - name: List merge commits in dev
        run: |
          echo "Listing merge commits in dev:"
          git log --merges --first-parent dev --oneline || true

      - name: Resolve ref
        id: resolve_ref
        run: |
          REF="${{ steps.normalize.outputs.normalized_branch }}"
          # Try local ref
          if ! SHA=$(git rev-parse --verify --quiet "$REF"); then
            # Try origin/<ref>
            if ! SHA=$(git rev-parse --verify --quiet "origin/$REF"); then
              echo "Error: Ref '$REF' not found (neither local nor origin/$REF)."
              echo "Available branches:"
              git branch -a
              exit 1
            fi
          fi
          echo "ref_sha=$SHA" >> $GITHUB_OUTPUT
          echo "Resolved $REF to $SHA"

      - name: Find last merge commit
        id: find_commits
        run: |
          TARGET_SHA=${{ steps.resolve_ref.outputs.ref_sha }}
          MERGE_BASE=$(git merge-base dev $TARGET_SHA)
          MERGE_COMMIT=""
          echo "Merge base between dev and target: $MERGE_BASE"

          for COMMIT in $(git log --merges --first-parent dev --pretty=%H); do
            SECOND_PARENT=$(git rev-list --parents -n 1 $COMMIT | awk '{print $3}')
            if [ -n "$SECOND_PARENT" ] && git merge-base --is-ancestor $SECOND_PARENT $TARGET_SHA; then
              if ! git merge-base --is-ancestor $SECOND_PARENT $MERGE_BASE; then
                MERGE_COMMIT=$COMMIT
                break
              fi
            fi
          done

          if [ -z "$MERGE_COMMIT" ]; then
            echo "No explicit merge commit found. Trying fast-forward detection..."
            COMMITS=$(git log dev ^$MERGE_BASE --no-merges --pretty=%H --ancestry-path $TARGET_SHA..dev | head -n 1)
            if [ -z "$COMMITS" ]; then
              echo "Error: No relevant commits found from ref"
              exit 1
            else
              echo "commit_to_revert=$COMMITS" >> $GITHUB_OUTPUT
              echo "is_merge_commit=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "Found merge commit: $MERGE_COMMIT"
            echo "commit_to_revert=$MERGE_COMMIT" >> $GITHUB_OUTPUT
            echo "is_merge_commit=true" >> $GITHUB_OUTPUT
          fi

      - name: Revert
        run: |
          COMMIT=${{ steps.find_commits.outputs.commit_to_revert }}
          IS_MERGE=${{ steps.find_commits.outputs.is_merge_commit }}
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"

          git checkout dev
          if [ "$IS_MERGE" = "true" ]; then
            echo "Reverting merge commit $COMMIT"
            git revert -m 1 --no-edit $COMMIT
          else
            echo "Reverting single commit $COMMIT"
            git revert --no-edit $COMMIT
          fi

          git push origin dev
