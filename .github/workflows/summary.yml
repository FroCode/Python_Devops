name: manual-revert-workflow

on:
  workflow_dispatch:
    inputs:
      branch_name:
        description: "Branch name whose squash commits to revert in dev (e.g., f15)"
        required: true

jobs:
  revert-squash-commits:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.PAT }}

    - name: Normalize branch name
      id: normalize
      run: |
        BRANCH_NAME=$(echo "${{ github.event.inputs.branch_name }}" | sed 's#^remotes/origin/##')
        if [[ ! "$BRANCH_NAME" =~ ^[a-zA-Z0-9._/-]+$ ]]; then
          echo "Error: Invalid branch name '$BRANCH_NAME'"
          exit 1
        fi
        echo "normalized_branch=$BRANCH_NAME" >> $GITHUB_OUTPUT

    - name: Switch to dev
      run: |
        git fetch origin dev
        git checkout dev
        git pull origin dev

    - name: Identify squash commits
      id: find_squash_commits
      run: |
        # Try both: PR merge messages and explicit branch name mentions
        PATTERN="${{ steps.normalize.outputs.normalized_branch }}"
        SQUASH_COMMITS=$(git log dev --grep="$PATTERN" --pretty=%H)
        if [ -z "$SQUASH_COMMITS" ]; then
          echo "Error: No commits found in dev mentioning '$PATTERN'"
          exit 1
        fi
        echo "Found squash commits:"
        echo "$SQUASH_COMMITS"
        echo "squash_commits<<EOF" >> $GITHUB_OUTPUT
        echo "$SQUASH_COMMITS" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Configure Git
      run: |
        git config --global user.name "GitHub Actions"
        git config --global user.email "actions@github.com"

    - name: Revert squash commits
      id: revert
      run: |
        echo "Attempting to revert:"
        ANY_CHANGES=false
        REVERTED=""
        IFS=$'\n'
        for COMMIT in $(echo "${{ steps.find_squash_commits.outputs.squash_commits }}"); do
          if git log --grep="Revert.*$COMMIT" dev --oneline | grep -q .; then
            echo "Skipping $COMMIT: already reverted."
            continue
          fi
          echo "Reverting $COMMIT ..."
          set +e
          git revert --no-commit $COMMIT
          STATUS=$?
          set -e
          if [ $STATUS -ne 0 ]; then
            echo "Conflict reverting $COMMIT, aborting."
            git revert --abort || true
            continue
          fi
          if git diff --cached --quiet; then
            echo "No changes from revert (probably already reverted)."
            git reset
          else
            git commit -m "Revert squash commit $COMMIT (from branch ${{ steps.normalize.outputs.normalized_branch }})"
            ANY_CHANGES=true
            REVERTED="$REVERTED $COMMIT"
          fi
        done

        if [ "$ANY_CHANGES" = "true" ]; then
          echo "has_changes=true" >> $GITHUB_OUTPUT
          echo "reverted_commits=$REVERTED" >> $GITHUB_OUTPUT
        else
          echo "No changes made."
          exit 1
        fi

    - name: Push changes
      if: steps.revert.outputs.has_changes == 'true'
      run: |
        git pull origin dev --rebase
        git push origin dev
        echo "Pushed reverts: ${{ steps.revert.outputs.reverted_commits }}"
