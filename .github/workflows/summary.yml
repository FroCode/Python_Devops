name: manual-revert-workflow

on:
  workflow_dispatch:
    inputs:
      branch_name:
        description: "Branch name whose squash commit from a pull request to revert in dev (e.g., f15)"
        required: true

jobs:
  revert-squash:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch all history for proper commit lookup
        token: ${{ secrets.PAT }}  # Use PAT for push permissions

    - name: Normalize branch name
      id: normalize
      run: |
        BRANCH_NAME=$(echo "${{ github.event.inputs.branch_name }}" | sed 's#^remotes/origin/##')
        if [[ ! "$BRANCH_NAME" =~ ^[a-zA-Z0-9._-]+$ ]]; then
          echo "Error: Invalid branch name '$BRANCH_NAME'"
          exit 1
        fi
        echo "normalized_branch=$BRANCH_NAME" >> $GITHUB_OUTPUT

    - name: Validate branch exists
      run: |
        if ! git show-ref --quiet refs/remotes/origin/${{ steps.normalize.outputs.normalized_branch }}; then
          echo "Error: Remote branch 'origin/${{ steps.normalize.outputs.normalized_branch }}' does not exist. Available branches:"
          git branch -a
          exit 1
        fi

    - name: Switch to dev branch
      run: git checkout dev

    - name: Debug commits
      run: |
        echo "Listing squash commits in dev:"
        git log --grep="Merge pull request .* from .*${{ steps.normalize.outputs.normalized_branch }}" dev --oneline --graph
        echo "Current commit on dev:"
        git log -1 --oneline

    - name: Find squash commit for PR
      id: find_squash_commit
      run: |
        SQUASH_COMMIT=""
        for COMMIT in $(git log dev --pretty=%H); do
          COMMIT_MESSAGE=$(git log --format=%B -n 1 $COMMIT)
          if echo "$COMMIT_MESSAGE" | grep -q "Merge pull request .* from .*${{ steps.normalize.outputs.normalized_branch }}"; then
            SQUASH_COMMIT=$COMMIT
            break
          fi
        done
        if [ -z "$SQUASH_COMMIT" ]; then
          echo "Error: No squash commit found for a pull request from branch '${{ steps.normalize.outputs.normalized_branch }}' in dev"
          exit 1
        fi
        # Check if the squash commit was already reverted
        if git log --grep="Revert.*$SQUASH_COMMIT" dev --oneline | grep -q .; then
          echo "Error: Squash commit $SQUASH_COMMIT from branch '${{ steps.normalize.outputs.normalized_branch }}' has already been reverted."
          git log --grep="Revert.*$SQUASH_COMMIT" dev --oneline
          exit 1
        fi
        echo "Found squash commit: $SQUASH_COMMIT"
        echo "commit_to_revert=$SQUASH_COMMIT" >> $GITHUB_OUTPUT
        echo "Commit details:"
        git show --summary $SQUASH_COMMIT

    - name: Configure Git user
      run: |
        git config --global user.name "GitHub Actions"
        git config --global user.email "actions@github.com"

    - name: Attempt revert commit
      id: revert
      run: |
        echo "Attempting to revert squash commit ${{ steps.find_squash_commit.outputs.commit_to_revert }}"
        set +e  # Disable exit-on-error to capture revert output
        REVERT_OUTPUT=$(git revert --no-commit ${{ steps.find_squash_commit.outputs.commit_to_revert }} 2>&1)
        REVERT_STATUS=$?
        set -e  # Re-enable exit-on-error
        if [ $REVERT_STATUS -ne 0 ]; then
          echo "Error: Failed to revert commit ${{ steps.find_squash_commit.outputs.commit_to_revert }}: $REVERT_OUTPUT"
          git revert --abort || true
          exit 1
        fi
        if git status --porcelain | grep -q "^[ADRU]"; then
          git commit -m "Revert squash commit ${{ steps.find_squash_commit.outputs.commit_to_revert }} from pull request of ${{ steps.normalize.outputs.normalized_branch }}"
          echo "has_changes=true" >> $GITHUB_OUTPUT
          echo "revert_output=" >> $GITHUB_OUTPUT
        else
          echo "Error: Revert produced no changes (commit may already be reverted or empty). Revert output: $REVERT_OUTPUT"
          git revert --abort || true
          exit 1
        fi
      continue-on-error: true

    - name: Handle revert result
      run: |
        if [ "${{ steps.revert.outputs.has_changes }}" = "true" ]; then
          echo "No conflicts, creating PR to dev"
          git remote set-url origin https://${{ secrets.PAT }}@github.com/${{ github.repository }}.git
          REVERT_BRANCH="revert-${{ steps.normalize.outputs.normalized_branch }}-${{ github.run_id }}"
          git checkout -b "$REVERT_BRANCH"
          git push origin "$REVERT_BRANCH"
          gh pr create --base dev --head "$REVERT_BRANCH" --title "Revert squash commit ${{ steps.find_squash_commit.outputs.commit_to_revert }} from ${{ steps.normalize.outputs.normalized_branch }}" --body "Automated revert of squash commit ${{ steps.find_squash_commit.outputs.commit_to_revert }} from pull request of ${{ steps.normalize.outputs.normalized_branch }}"
        else
          echo "Error: No changes to commit after revert attempt. See previous step for details."
          exit 1
        fi
      env:
        GITHUB_TOKEN: ${{ secrets.PAT }}

    - name: Notify success
      if: steps.revert.outputs.has_changes == 'true'
      run: echo "Successfully created PR to revert squash commit ${{ steps.find_squash_commit.outputs.commit_to_revert }} from branch '${{ steps.normalize.outputs.normalized_branch }}' in dev"