name: push-dev-to-test

on:
  workflow_run:
    workflows: ["manual-revert-workflow"]
    types:
      - completed
  workflow_dispatch:
    inputs:
      force_push:
        description: "Force push dev to test (overwrites test branch)"
        required: false
        default: "false"

jobs:
  push-to-test:
    runs-on: ubuntu-latest
    if: github.event.workflow_run.conclusion == 'success'

    steps:
      # Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.PAT }}

      # Configure Git
      - name: Configure Git
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      # Validate branches
      - name: Validate branches
        run: |
          git fetch origin
          if ! git ls-remote --heads origin dev | grep -q dev; then
            echo "Error: dev branch does not exist"
            exit 1
          fi
          if ! git ls-remote --heads origin test | grep -q test; then
            echo "Creating test branch from dev"
            git checkout dev
            git push origin dev:test
            exit 0
          fi

      # Push dev to test (squash)
      - name: Push dev to test (squash)
        id: push
        run: |
          git checkout test
          git fetch origin dev
          set +e
          git merge --squash origin/dev
          STATUS=$?
          set -e
          if [ $STATUS -ne 0 ]; then
            echo "Merge conflict detected during squash"
            TIMESTAMP=$(date +%s)
            CONFLICT_BRANCH="conflict/dev-to-test-$TIMESTAMP"
            git checkout -b "$CONFLICT_BRANCH"
            git push origin "$CONFLICT_BRANCH"
            gh pr create \
              --base test \
              --head "$CONFLICT_BRANCH" \
              --title "Merge conflict: dev to test" \
              --body "Automatic PR: Conflicts occurred while squash-merging dev into test. Please resolve manually."
            echo "conflict=true" >> $GITHUB_OUTPUT
            exit 0
          fi

          # Commit the squashed changes
          git commit -m "Squash merge dev into test [ci skip]"
          git push origin test
          echo "conflict=false" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ secrets.PAT }}

      # Force push if requested
      - name: Force push dev to test
        if: github.event.inputs.force_push == 'true' && steps.push.outputs.conflict == 'false'
        run: |
          git checkout dev
          git push origin dev:test --force
          echo "Force pushed dev to test"
        env:
          GH_TOKEN: ${{ secrets.PAT }}

      # Validate test branch (for squash merge)
      - name: Validate test branch
        if: steps.push.outputs.conflict == 'false'
        run: |
          git fetch origin test
          git checkout test
          LAST_COMMIT=$(git rev-parse HEAD)
          echo "Latest commit on test: $LAST_COMMIT"
          echo "Validation complete: squash commit exists"

      # Notify on merge conflict
      - name: Notify on merge conflict
        if: steps.push.outputs.conflict == 'true'
        run: |
          gh issue create \
            --title "Merge Conflict: Dev to Test" \
            --body "Merge conflict occurred while squash-merging dev into test. Conflict branch created. Check PR for details." \
            --repo ${{ github.repository }}
        env:
          GH_TOKEN: ${{ secrets.PAT }}
