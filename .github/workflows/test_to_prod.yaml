name: push-test-to-prod

on:
  workflow_run:
    workflows: ["manual-revert-workflow"]
    types:
      - completed
  workflow_dispatch:
    inputs:
      force_push:
        description: "Force push test to prod (overwrites prod branch)"
        required: false
        default: "false"

jobs:
  push-to-prod:
    runs-on: ubuntu-latest
    if: github.event.workflow_run.conclusion == 'success'

    steps:
      # Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.PAT }}

      # Configure Git
      - name: Configure Git
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      # Validate branches
      - name: Validate branches
        run: |
          git fetch origin
          if ! git ls-remote --heads origin test | grep -q test; then
            echo "Error: test branch does not exist"
            exit 1
          fi
          if ! git ls-remote --heads origin prod | grep -q prod; then
            echo "Creating prod branch from test"
            git checkout test
            git push origin test:prod
            exit 0
          fi

      # Push test to prod
      - name: Push test to prod
        id: push
        run: |
          git checkout prod
          git fetch origin test
          set +e
          git merge origin/test --no-ff --no-edit
          STATUS=$?
          set -e
          if [ $STATUS -ne 0 ]; then
            echo "Merge conflict detected"
            TIMESTAMP=$(date +%s)
            CONFLICT_BRANCH="conflict/test-to-prod-$TIMESTAMP"
            git checkout -b "$CONFLICT_BRANCH"
            git push origin "$CONFLICT_BRANCH"
            gh pr create \
              --base prod \
              --head "$CONFLICT_BRANCH" \
              --title "Merge conflict: test to prod" \
              --body "Automatic PR: Conflicts occurred while merging test into prod. Please resolve manually."
            echo "conflict=true" >> $GITHUB_OUTPUT
            exit 0
          fi
          git push origin prod
          echo "conflict=false" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ secrets.PAT }}

      # Force push if requested
      - name: Force push test to prod
        if: github.event.inputs.force_push == 'true' && steps.push.outputs.conflict == 'false'
        run: |
          git checkout test
          git push origin test:prod --force
          echo "Force pushed test to prod"
        env:
          GH_TOKEN: ${{ secrets.PAT }}

      # Validate prod branch
      - name: Validate prod branch
        if: steps.push.outputs.conflict == 'false'
        run: |
          git fetch origin prod
          git checkout prod
          MERGE_COMMIT=$(git log --merges --pretty=%H -n 1)
          if [ -z "$MERGE_COMMIT" ]; then
            echo "No merge commit found in prod branch"
            exit 1
          fi
          echo "Merge commit validated: $MERGE_COMMIT"

      # Notify on merge conflict
      - name: Notify on merge conflict
        if: steps.push.outputs.conflict == 'true'
        run: |
          gh issue create \
            --title "Merge Conflict: Test to Prod" \
            --body "Merge conflict occurred while merging test into prod. Conflict branch created. Check PR for details." \
            --repo ${{ github.repository }}
        env:
          GH_TOKEN: ${{ secrets.PAT }}
