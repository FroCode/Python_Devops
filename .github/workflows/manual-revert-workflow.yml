name: Revert Squash Merge Workflow

on:
  workflow_dispatch:
    inputs:
      branch_name:
        description: "Feature branch whose last squash merge into dev should be reverted (e.g., feature/30)"
        required: true

jobs:
  revert-squash-commit:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.PAT }}

      - name: Normalize branch name
        id: normalize
        run: |
          BRANCH_NAME=$(echo "${{ github.event.inputs.branch_name }}" | sed 's#^remotes/origin/##')
          if [[ ! "$BRANCH_NAME" =~ ^[a-zA-Z0-9._/-]+$ ]]; then
            echo "Error: Invalid branch name '$BRANCH_NAME'"
            exit 1
          fi
          echo "normalized_branch=$BRANCH_NAME" >> $GITHUB_OUTPUT

      - name: Switch to dev
        run: |
          git fetch origin dev
          git checkout dev
          git pull origin dev

      - name: Find latest squash merge commit
        id: find_commit
        run: |
          PATTERN="${{ steps.normalize.outputs.normalized_branch }}"
          COMMIT=$(git log dev --grep="from .*$PATTERN" --pretty=%H -n 1)
          if [ -z "$COMMIT" ]; then
            echo "Error: No squash merge commit found in dev for '$PATTERN'"
            exit 1
          fi
          echo "commit_sha=$COMMIT" >> $GITHUB_OUTPUT

      - name: Check if commit already reverted
        id: check_revert
        run: |
          COMMIT="${{ steps.find_commit.outputs.commit_sha }}"
          REVERT_CHECK=$(git log dev --grep="Revert squash merge $COMMIT" --pretty=%H -n 1)
          if [ -n "$REVERT_CHECK" ]; then
            echo "Error: Commit $COMMIT has already been reverted in dev"
            exit 1
          fi
          echo "revert_status=not_reverted" >> $GITHUB_OUTPUT

      - name: Configure Git
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      - name: Authenticate GitHub CLI
        run: |
          gh auth login --with-token <<< "${{ secrets.PAT }}"

      - name: Revert latest squash merge commit
        id: revert
        run: |
          set -e
          COMMIT="${{ steps.find_commit.outputs.commit_sha }}"
          FEATURE="${{ steps.normalize.outputs.normalized_branch }}"
          SHORT_HASH=$(echo "$COMMIT" | cut -c1-7)
          TIMESTAMP=$(date +%s)
          BRANCH="revert-conflict/$FEATURE/$SHORT_HASH-$TIMESTAMP"

          echo "Attempting to revert $COMMIT from $FEATURE..."

          # Attempt revert without committing
          set +e
          git revert --no-commit "$COMMIT"
          STATUS=$?
          set -e

          if [ $STATUS -ne 0 ]; then
            echo "Conflict detected for $COMMIT"
            echo "Creating branch for manual conflict resolution..."
            
            # Create a branch from current dev
            git checkout -b "$BRANCH"

            # Stage all files (conflicted files will keep conflict markers)
            git add -A
            git commit -m "Conflicted revert of $COMMIT from $FEATURE (manual resolution required)"

            echo "Pushing conflicted branch $BRANCH..."
            git push origin "$BRANCH"

            # Prepare PR body safely
            CONFLICTED_FILES=$(git diff --name-only --diff-filter=U || echo "Unknown")
                        PR_BODY=$(cat <<EOF
            Automatic PR: Conflicts occurred while reverting $COMMIT from branch '$FEATURE'.

            **Steps to resolve:**
            1. Open the 'Files changed' tab in this PR to view conflicts.
            2. Resolve any conflict markers (\`\`\`<<<<<<<\`\`\`, \`\`\`=======\`\`\`, \`\`\`>>>>>>>\`\`\`) directly in GitHub or locally.
            3. Decide whether to:
              - Keep the modified version from HEAD (stage with \`git add <file>\`).
              - Accept the deletion from the revert (stage with \`git rm <file>\`).
            4. Once resolved, commit the changes and push them.
            5. Merge the PR once conflicts are resolved.

            **Conflicted files:**
            \`\`\`
            $CONFLICTED_FILES
            \`\`\`

            **Commit details:**
            - Commit SHA: $COMMIT
            - Feature branch: $FEATURE
            EOF
            )

            echo "$PR_BODY" > pr_body.txt

            echo "Creating PR for manual conflict resolution..."
            gh pr create \
              --base dev \
              --head "$BRANCH" \
              --title "Resolve conflicts: Revert $COMMIT from $FEATURE" \
              --body-file pr_body.txt

            echo "conflict=true" >> $GITHUB_OUTPUT
            exit 0
          fi

          # If revert succeeds, commit and mark no conflict
          git commit -m "Revert squash merge $COMMIT from $FEATURE"
          echo "conflict=false" >> $GITHUB_OUTPUT

      - name: Push revert to dev
        if: steps.revert.outputs.conflict == 'false'
        run: |
          git pull origin dev --rebase
          git push origin dev
